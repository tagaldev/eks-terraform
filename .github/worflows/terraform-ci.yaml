# name: Deploy Infrastructure 
# on: 
#   push:
#     branches:
#       - master
#     paths: 
#     - Terraform-SHGitHub/**
#     - module-eks/**
#     - main.tf
#     - provider.tf
#     - variables.tf

# env:      
#     AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
#     AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}

# jobs:
#   # staging:
#   #   name: test Infrastructure
#   #   runs-on: ubuntu-latest
#   #   defaults:
#   #       run:
#   #         working-directory: "eks_conf"

#   #   steps:

#   #   - name: Checkout Repo
#   #     uses: actions/checkout@v3
  
#   #   - name: setup AWS
#   #     uses: aws-actions/setup-sam@v2
#   #     with:
#   #       use-installer: true
#   #   - name : configure AWS
#   #     uses: aws-actions/configure-aws-credentials@v2
#   #     with:
#   #       aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#   #       aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#   #       aws-region: us-east-1

#   #   - name: Terraform Setup
#   #     uses: hashicorp/setup-terraform@v2
#   #     with:
#   #       terraform_version: 1.3.0
#   #     env:
#   #       GH_TOKEN: ${{ secrets.GH_TOKEN }}

#   #   - name: create producrion bucket
#   #     run: |
#   #       bucket_name=${{vars.BUCKET_NAME}}
#   #       if ! aws s3api head-bucket --bucket "$bucket_name"; then
#   #         aws s3 mb s3://"$bucket_name"
#   #       fi
#   #     continue-on-error: true

  
#   #   - name: Terraform Init
#   #     id: init
#   #     run: terraform init
      
#   #   - name: Terraform Plan
#   #     id: plan
#   #     run: |
#   #       terraform plan --no-color
#   #     continue-on-error: true

#   #   - name: Terraform Apply
#   #     id: apply
#   #     env:
#   #       TF_WORKSPACE: staging
#   #       TF_VAR_cluster-name: ${{vars.STAGING_CLUSTER_NAME}}
#   #     run: |
#   #       for i in {1..5}
#   #       do
#   #         terraform apply -auto-approve && break || sleep 10
#   #       done

#   #   - name: Terraform destroy
#   #     id: destroy
#   #     env:
#   #       TF_WORKSPACE: staging
#   #       TF_VAR_cluster-name: ${{vars.STAGING_CLUSTER_NAME}}
#   #     run: |
#   #       terraform destroy -auto-approve
 
#   # notify:
#   #   needs:
#   #     - staging
#   #   if: ${{ failure() }}
#   #   runs-on: ubuntu-latest
#   #   steps:
#   #     - name: Send failure notification
#   #       uses: cinotify/github-action@main
#   #       with:
#   #         to: ${{vars.EMAIL}}
#   #         subject: Workflow failed
#   #         body: The Staging failed, please check this on github actions

#   production:
#     # needs: staging
#     name: Deploy Infrastructure
#     runs-on: ubuntu-latest
#     defaults:
#         run:
#           working-directory: "eks_conf"
      
#     steps:
      
#     - name: Checkout Repo
#       uses: actions/checkout@v3

#     - name: setup AWS
#       uses: aws-actions/setup-sam@v2
#       with:
#         use-installer: true
#     - name : configure AWS
#       uses: aws-actions/configure-aws-credentials@v2
#       with:
#         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         aws-region: eu-north-1
    
#     - name: Terraform Setup
#       uses: hashicorp/setup-terraform@v2
#       with:
#         terraform_version: 1.3.0
#       env:
#         GH_TOKEN: ${{ secrets.GH_TOKEN }}
      
#     - name: Terraform Init
#       id: init
#       run: terraform init
      
#     - name: Terraform Apply
#       id: apply
#       env:
#         TF_WORKSPACE: production
#         TF_VAR_cluster-name: ${{vars.PROD_CLUSTER_NAME}}
#       run: |
#         for i in {1..5}
#         do
#           terraform apply -auto-approve && break || sleep 10
#         done

   


#   deploy_argo:
#       needs: production
#       name: Deploy argo
     
#       runs-on: ubuntu-latest
#       defaults:
#         run:
#           working-directory: "argo-cd_conf"
#       steps:

#       - name: Checkout Repo
#         uses: actions/checkout@v3

#       - name: setup AWS
#         uses: aws-actions/setup-sam@v2
#         with:
#           use-installer: true
#       - name : configure AWS
#         uses: aws-actions/configure-aws-credentials@v2
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: us-east-1

#       - name: Terraform Setup
#         uses: hashicorp/setup-terraform@v2
#         with:
#             terraform_version: 1.3.0
#         env:
#             GH_TOKEN: ${{ secrets.GH_TOKEN }}
                
#       - name: Terraform Init
#         id: init
#         run: terraform init
    
      
#       - name: Terraform Apply
#         id: apply
#         env:
#           TF_WORKSPACE: production
#           TF_VAR_bucket_name: ${{vars.BUCKET_NAME}}
#           TF_VAR_cluster-name: ${{vars.PROD_CLUSTER_NAME}}
#         run: |
#               aws eks update-kubeconfig --region us-east-1 --name ${{vars.PROD_CLUSTER_NAME}}
#               for i in {1..5}
#               do
#                 terraform apply -auto-approve && break || sleep 1
#               done
  
      

        
#   monitoring:
#       needs: deploy_argo
#       if: ${{ success() }}
#       name: monitoring
#       runs-on: ubuntu-latest
#       defaults:
#         run:
#           working-directory: "monitoring_conf"
#       steps:

#       - name: Checkout Repo
#         uses: actions/checkout@v3

#       - name: setup AWS
#         uses: aws-actions/setup-sam@v2
#         with:
#           use-installer: true
#       - name : configure AWS
#         uses: aws-actions/configure-aws-credentials@v2
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: us-east-1
      
#       - name: Terraform Setup
#         uses: hashicorp/setup-terraform@v2
#         with:
#             terraform_version: 1.3.0
#         env:
#             GH_TOKEN: ${{ secrets.GH_TOKEN }}
                     
#       - name: Terraform Init
#         id: init
#         run: terraform init
  
#       - name: Terraform Apply
#         id: apply
#         env:
#           TF_WORKSPACE: production
#           TF_VAR_bucket_name: ${{vars.BUCKET_NAME}}
#           TF_VAR_cluster-name: ${{vars.PROD_CLUSTER_NAME}}
#         run: |
#               aws eks update-kubeconfig --region us-east-1 --name ${{vars.PROD_CLUSTER_NAME}}
#               for i in {1..5}
#               do
#                 terraform apply -auto-approve && break || sleep 1
#               done
          

#   notify2:
#     needs:
#       - production
#       - deploy_argo
#       - monitoring
#     if: ${{ failure() }}
#     runs-on: ubuntu-latest
#     steps:
#       - name: Send failure notification
#         uses: cinotify/github-action@main
#         with:
#           to: ${{vars.EMAIL}}
#           subject: Workflow failed
#           body: The workflow failed, please check this on github actions
